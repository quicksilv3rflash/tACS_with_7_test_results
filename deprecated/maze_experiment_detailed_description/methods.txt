Most researchers try to make their work appear more scholarly by minimizing the errors in their methodology when writing reports of their findings. This tendency harms scientific inquiry because it makes it harder for readers of the research to see -- and compensate for -- potential sources of error and distortion in the results. In order to combat this trend I have decided to put a summary of the flaws and shortcomings that I've noticed in this experiment before the abstract. You'll also find me speaking in both second and first person (and in an informal tone), because it's not possible to cut my grant funding (because I have none).
---summary of flaws and shortcomings---
>Slew rate of output device
>Low sample rate of output signal
>Low bit depth of output signal
>Inconsistent framerate (some "glitches" (stretched samples on playback) will be present in output)
>Compromisation of blinding for no signal experiment condition (tingling is perceptible during stimulation)
>Imperfect maze traversals used as prototypes (false turns present in shown path in maze #[INSERT NUMBERS],27,04,08)
>Tests conducted by multiple test administrators on several different contintents with no direct oversight
>Control EEG was too short for maze 15; spliced two copies of control signal end-to-end to double length (added an intermediate value to "smooth" the splice point such that the splice did not exceed the maximum delta between samples of the original signal)
>Playback of maze traversal "jumps" through the second-to-last cell of the maze in one frame; this is because all movements are logged by the time of cell exit, except for the last cell, which is noted in the log by the time the user ENTERS the cell
>The last 20 seconds (approximately) of maze 29's EEG data are missing because EEG data recording during the maze traversals was stopped too soon. The start time is properly aligned, however, so there shouldn't be any errors with alignment of the EEG data and the movements onscreen. I padded the stim29 array out with 127s (setting the output to 0mA during the period of lost data) to compensate.

This list is no doubt incomplete; these are only the flaws *I* saw, after all. However, since this is being posted on the internet, I've no doubt that friendly and helpful comments pointing out new and exciting errors will come rolling in. I'll post them below this note as they are received.
-----------
METHODS: MAZE GENERATION, MOVEMENT AND EEG RECORDING
-----------
To generate the mazes required for the experiment, the program "maze_generator.py", included here, was run. The program was run on a Windows 8.1 computer with IDLE 3.2.5, Python 3.2.5, and Pygame 1.9.2a0 installed. The program's output was captured using [alt] + [print screen]. The resulting image was cropped to 603 by 603 pixels, the four pixels in each corner were turned from black to white, and the result was saved as a .png file. In the Python shell (immediately after closing maze_generator.py), after each maze image capture, the value of the variable mazearray was recovered through IDLE's Python shell and saved as a .txt file. This process was repeated 32 times to generate mazeXX.png/mazeXX.txt files for each of the mazes with index numbers 00 through 29 for tACS testing. Mazes with index numbers 30 and 31 were generated and saved for software development and tutorial purposes.

With maze images and representative text files generated, the next step was simultaneous recording of the movement path through each maze and recording of the EEG signal accompanying a trained maze traversal. The graphics were rendered by the script maze_move_recorder_with_eeg_sync.py, and the resulting log of movements was recovered through the IDLE Python shell and saved as all_30_maze_move_logs_during_eeg_recording.txt. In order to make sure that the recorded movements onscreen could be precisely timed with the recorded EEG, the loss of mouse/keyboard focus on the Python script's open window was synchronized to the starting time of the EEG. Each maze was then repeated 6 times, with the 6th traversal being saved (timestamped and movements logged). A bug in Emotiv's TestBench software caused by my OS having "," as the default decimal mark instead of "." resulted in the loss of the first set of test data and the recording process was repeated again 6 days later. EEG recording was accomplished using an Emotiv EPOC EEG headset with data saved to a .edf file by Emotiv's research SDK. Note that this .edf file (self-maze_eeg-30.08.15.16.34.39.edf), though included here in the interest of completeness, is not possible to open with many .edf file viewers (it can be opened by Emotiv's proprietary TestBench software) due to the inclusion of a character in the header which is not in the standard 7-bit ASCII character set. Conversion to a .csv file (self-maze_eeg-30.08.15.16.34.39.CSV) enabled further processing of the data. A control EEG, self-control_no_maze_closed_eyes-30.08.15.16.32.57.edf, taken with eyes closed before the maze traversal EEG, was also recorded and converted to .csv format. All electrodes had appropriate impedance for recording (as determined by the TestBench software) during the EEG, as seen in the screenshot testbenchqualitypicture.png (green circles indicate electrodes whose signal quality is good).

The move log, all_30_maze_move_logs_during_eeg_recording.txt, was split into 30 separate files, indexed from 00 to 29, by the Python script split_giant_log_file.py.

Only one electrode, AF3, was used as the signal source for the tACS output. LibreOffice Calc was used to remove all other data columns from the .csv files, resulting in controlsignal_AF3_only.csv and mazesignal_AF3_only.csv as single-column .csv files. These .csv files (controlsignal_AF3_only.csv and mazesignal_AF3_only for control EEG and maze EEG data, respectively) contain only the raw data from electrode AF3 as a single column, with each value separated by 7.8125ms (1/128 seconds) from the previous value. The control signal was too short for one of the mazes (maze 15, 561 frames to play back movements, only 450 frames' worth of control signal recorded), so I doubled the length of the recorded control signal by appending a copy of the original to the end of itself, and added an intermediate value so the delta between values at the splice point would not exceed the maximum delta between values found in the original signal. The Python script float_list_csv_to_stim.py was used to generate controlstim.txt (values were recovered through the IDLE Python shell).

The script timeslice_and_process_csv.py was used to generate stimXX.txt files for each maze (XX is replaced by an index number from 00 to 29, inclusive).


tACS to the left DLPFC of test subjects.

Include screen-grabs of relevant parts of testbench manual! Specifically the bits about the 128 samples/sec but the screwy 129 samples/cycle stuff...

